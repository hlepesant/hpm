#!/bin/bash

platform='unknown'
unamestr=$(uname)


#PROTO="https"
PROTO="http"
HCORP_RELEASE="releases.hashicorp.com"
HCORP_DIR="/opt/hashicorp"
PRODUCT="terraform"

DEBUG=1

function get_os() {
	case "${OSTYPE}" in
	  solaris*) echo "solaris" ;;
	  darwin*)  echo "osx" ;; 
	  linux*)   echo "linux" ;;
	  bsd*)     echo "freebsd" ;;
	  msys*)    echo "windows" ;;
	  *)        echo "unknown: ${OSTYPE}" ;;
	esac
}

function get_arch() {
	arch=$(uname -m)
	case "${arch}" in
	  x86_64*) echo "amd64" ;;
	  x86_32*) echo "x86" ;;
	  *)       echo "unknown: ${arch}" ;;
	esac
}

function test_sudo_user() {
	if [[ -z ${SUDO_USER} ]]
	then
		echo "run with sudo"
		exit 64
	fi
}

function test_depends() {
	local current_os=${1}
	case "${current_os}" in
		solaris*) echo "solaris todo" ;;
		darwin*)  echo "install chtf formula with hombrew : brew instaff chtf"; exit 0 ;; 
		linux*)
			if [[ ! -x /usr/bin/unzip ]]; then
				echo "install unzip"
				exit 65
			fi
			if [[ ! -x /usr/bin/wget ]]; then
				echo "install wget"
				exit 65
			fi
		;;
		bsd*)     echo "freebsd todo" ;;
		msys*)    echo "windows is not supported." && exit 666 ;;
		*)        echo "unknown: ${current_os}" ;;
	esac
}

function list_installed_releases() {
	if [[ -d ${HCORP_DIR}/${PRODUCT} ]]
	then
		releases=$(find ${HCORP_DIR} -mindepth 1 -type d)
	else
		echo "No installed release"
	fi
}

function check_release_is_installed() {
	local rel=${1}
	if [[ ! -x ${HCORP_DIR}/${PRODUCT}/${rel}/terraform ]]
	then
		echo "false"
	else
		echo "true"
	fi
}

function get_zip_url() {
	# http://releases.hashicorp.com/terraform/0.11.1/terraform_0.11.1_linux_amd64.zip
	local release=${1}
	local zip=${2}
	zip_url=$(printf "%s://%s/%s/%s/%s" ${PROTO} ${HCORP_RELEASE} ${PRODUCT} ${release} ${zip}) 
	echo ${zip_url}
}

# https://gist.github.com/hrwgc/7455343
function validate_url() {
	local url=${1}	
	#if [[ `wget -S --spider ${url} 2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then echo "true"; else echo "false"; fi
	valid=$(wget --no-hsts --timeout=5 --server-response --spider ${url} 2>&1|grep -c '^Remote file exists.')

	if [[ ${valid} -eq "0" ]]; then
		echo "This release is not available."
		exit 0
	fi
}

function get_zip_name() {
	# terraform_0.11.1_linux_amd64.zip
	local rel=${1}
	local os=${2}
	local arch=${3}
	zip_name=$(printf "%s_%s_%s_%s.zip" ${PRODUCT} ${rel} ${os} ${arch} ) 
	echo ${zip_name}
}

function wget_zip() {
	local url=${1}
	local output=${2}
	if [[ ${DEBUG} -eq "1" ]]; then
		echo "wget --no-hsts --quiet ${url} --output-document=/tmp/${output}"
	fi
	wget --no-hsts --quiet ${url} --output-document=/tmp/${output}
}

function create_release_folder() {
	local rel=${1}
	folder=$(printf "%s/%s/%s" ${HCORP_DIR} ${PRODUCT} ${rel})
	mkdir -p ${folder}
	echo ${folder}
}

function unzip_archive() {
	# unzip -qq /tmp/terraform_0.11.1_linux_amd64.zip -d /home/hugues/opt/hashicorp/terraform/0.11.1/
	local zip=${1}
	local dir=${2}
	unzip -f -qq /tmp/${zip} -d ${dir}/
	rm -f /tmp/${zip}
}

function create_link() {
	ln -fs ${folder}/terraform /usr/local/bin/terraform
}

function run_tf_version() {
	terraform version
}


if [ $# -eq 0 ]
then
	echo "List installed release"
	list_installed_release
else
	test_sudo_user

	release=${1}
	current_os=$(get_os)
	current_arch=$(get_arch)

	test_depends ${current_os}

	release_is_installed=$(check_release_is_installed ${release})

	if [[ "${release_is_installed}" -eq "1" ]]
	then
		echo "release ${release} is installed"
	else
		zipname=$(get_zip_name ${release} ${current_os} ${current_arch})
		zip=$(get_zip_url ${release} ${zipname})
		url_exists=$(validate_url ${zip})
		wget_zip ${zip} ${zipname}
		folder=$(create_release_folder ${release})
		unzip_archive ${zipname} ${folder}
		create_link
	fi

	run_tf_version
	#echo "release installed : create symbolic link"
	#echo "release not installed : "
	#echo "get url for this OS"
	#echo "download to tmp"
	#echo "create release folder"
	#echo "unzip archive to folder"
	#echo "delete archive"
	#echo "create symbolic link"
fi

#rm ${zipname}

